/* * Copyright 2017 BLOCAIN, Inc. All rights reserved. com.blocain * PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. */package com.blocain.bitms.trade.risk.service;import java.math.BigDecimal;import com.blocain.bitms.tools.utils.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.blocain.bitms.quotation.entity.RtQuotationInfo;import com.blocain.bitms.quotation.service.RtQuotationInfoService;import com.blocain.bitms.tools.enums.CommonEnums;import com.blocain.bitms.tools.exception.BusinessException;import com.blocain.bitms.trade.fund.consts.FundConsts;import com.blocain.bitms.trade.fund.service.AccountAssetService;import com.blocain.bitms.trade.stockinfo.entity.StockInfo;import com.blocain.bitms.trade.trade.enums.TradeEnums;/** * 风控服务接口实现类 * <p>File：RiskServiceImpl.java </p> * <p>Title: RiskServiceImpl </p> * <p>Description:RiskServiceImpl </p> * <p>Copyright: Copyright (c) 2017-11-22</p> * <p>Company: BloCain</p> * @author zhangchunxi * @version 1.0 */@Servicepublic class RiskServiceImpl implements RiskService{    public static final Logger  logger = LoggerFactory.getLogger(RiskServiceImpl.class);        @Autowired    private AccountAssetService accountAssetService;        @Autowired    RtQuotationInfoService      rtQuotationInfoService;        @Override    public void entrustRisk(StockInfo stockInfo, Long accountId, String entrustDirect, BigDecimal entrustPrice, String entrustType, Long exchangePairVCoin,            Long exchangePairMoney) throws BusinessException    {        // ============================合约交易 start===============================================        if (StringUtils.equalsIgnoreCase(stockInfo.getStockType(), FundConsts.STOCKTYPE_CONTRACTSPOT))        {            boolean isVCoin = (stockInfo.getTradeStockinfoId().longValue() != stockInfo.getId());            BigDecimal btcAmtNet = accountAssetService.getNetAsset(accountId, exchangePairVCoin, exchangePairMoney);            BigDecimal usdxAmtNet = accountAssetService.getNetAsset(accountId, exchangePairMoney, exchangePairMoney);            RtQuotationInfo rtQuotationInfo = rtQuotationInfoService.queryRtQuotationInfo(exchangePairVCoin, exchangePairMoney);            logger.debug(rtQuotationInfo.toString());            BigDecimal idxAvgPrice = BigDecimal.ZERO;            BigDecimal platPrice = BigDecimal.ZERO;            BigDecimal entrustSellOne = BigDecimal.ZERO;            BigDecimal entrustBuyOne = BigDecimal.ZERO;            if (rtQuotationInfo != null)            {                idxAvgPrice = rtQuotationInfo.getIdxAvgPrice();                platPrice = rtQuotationInfo.getPlatPrice();                entrustSellOne = rtQuotationInfo.getEntrustSellOne();                entrustBuyOne = rtQuotationInfo.getEntrustBuyOne();                if (idxAvgPrice == null || idxAvgPrice.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }                if (platPrice == null || platPrice.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }                if (entrustSellOne == null || entrustSellOne.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }                if (entrustBuyOne == null || entrustBuyOne.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }            }            else            {                throw new BusinessException("行情异常！");            }            // 限价            if (StringUtils.equalsIgnoreCase(entrustType, TradeEnums.ENTRUST_X_ENTRUST_TYPE_LIMITPRICE.getCode()))            {                // 委托卖出                if (StringUtils.equalsIgnoreCase(entrustDirect, TradeEnums.ENTRUST_DEAL_DIRECT_SPOT_SELL.getCode()))                {                    // 2.大限价 卖出大限价：[加权指数*95%，加权指数*200%]                    BigDecimal minPrice = BigDecimal.ZERO;                    BigDecimal maxPrice = BigDecimal.valueOf(999999);                    minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getSellMaxLimitPriceDownPercent()));                    maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getSellMaxLimitPriceUpPercent()));                    if (minPrice.compareTo(BigDecimal.ZERO) < 0)                    {                        minPrice = BigDecimal.ZERO;                    }                    if (accountId.longValue() > FundConsts.SYSTEM_ACCOUNT_ID.longValue())                    {                        if (isVCoin)                        { // 数字货币作为标的                          // 多头卖                            logger.debug("数字货币净值：" + btcAmtNet);                            logger.debug("法定货币净值：" + usdxAmtNet);                            if (usdxAmtNet.compareTo(BigDecimal.ZERO) < 0 && btcAmtNet.compareTo(BigDecimal.ZERO) > 0)                            { // 多头爆仓                                BigDecimal explosionPrice = usdxAmtNet.divide(btcAmtNet, 8, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(-1));                                // 多单允许卖入价=大限价-0.5%                                explosionPrice = explosionPrice.multiply(BigDecimal.ONE.add(stockInfo.getClosePositionLongPrePercent()));                                logger.debug("账户：" + accountId + "多头爆仓价格" + explosionPrice + " minPrice=" + minPrice);                                if (minPrice.compareTo(explosionPrice) < 0)                                {                                    logger.debug("价格下限=【大限价下限，空头爆仓价上浮】取最大值=空头爆仓价上浮");                                    minPrice = explosionPrice;                                }                            }                        }                        else                        { // 法定货币作为标的                          // 多头卖                            logger.debug("数字货币净值：" + btcAmtNet);                            logger.debug("法定货币净值：" + usdxAmtNet);                            if (btcAmtNet.compareTo(BigDecimal.ZERO) < 0 && usdxAmtNet.compareTo(BigDecimal.ZERO) > 0)                            { // 多头爆仓                                BigDecimal explosionPrice = btcAmtNet.divide(usdxAmtNet, 8, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(-1));                                // 多单允许卖入价=大限价-0.5%                                explosionPrice = explosionPrice.multiply(BigDecimal.ONE.add(stockInfo.getClosePositionLongPrePercent()));                                logger.debug("账户：" + accountId + "多头爆仓价格" + explosionPrice + " minPrice=" + minPrice);                                if (minPrice.compareTo(explosionPrice) < 0)                                {                                    logger.debug("价格下限=【大限价下限，空头爆仓价上浮】取最大值=空头爆仓价上浮");                                    minPrice = explosionPrice;                                }                            }                        }                    }                    minPrice = minPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_UP);                    maxPrice = maxPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                    if (minPrice.compareTo(BigDecimal.ZERO) < 0)                    {                        minPrice = BigDecimal.ZERO;                    }                    logger.debug("期货卖出大限价 price[" + minPrice + "," + maxPrice + "]");                    BigDecimal price = entrustPrice;                    if (price.compareTo(minPrice) < 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    if (price.compareTo(maxPrice) > 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    // 2.小限价                    // 卖出小限价：[最新成交价*99%，加权指数*200%]                    minPrice = entrustBuyOne.multiply(BigDecimal.ONE.subtract(stockInfo.getSellMinLimitPriceDownPercent()));                    maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getSellMaxLimitPriceUpPercent()));                    minPrice = minPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_UP);                    maxPrice = maxPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                    if (minPrice.compareTo(BigDecimal.ZERO) < 0)                    {                        minPrice = BigDecimal.ZERO;                    }                    logger.debug("期货卖出小限价 price[" + minPrice + "," + maxPrice + "]");                    price = entrustPrice;                    if (price.compareTo(minPrice) < 0)                    {                        logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    if (price.compareTo(maxPrice) > 0)                    {                        logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                }                // 委托买入                else if (StringUtils.equalsIgnoreCase(entrustDirect, TradeEnums.ENTRUST_DEAL_DIRECT_SPOT_BUY.getCode()))                {                    // 1.大限价 买入大限价：[加权指数*50%，加权指数*105%]                    BigDecimal minPrice = BigDecimal.ZERO;                    BigDecimal maxPrice = BigDecimal.ZERO;                    minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getBuyMaxLimitPriceDownPercent()));                    maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getBuyMaxLimitPriceUpPercent()));                    if (accountId.longValue() > FundConsts.SYSTEM_ACCOUNT_ID.longValue())                    {                        if (isVCoin)                        { // 数字货币作为标的                          // 空头买                            logger.debug("数字货币净值：" + btcAmtNet);                            logger.debug("法定货币净值：" + usdxAmtNet);                            if (usdxAmtNet.compareTo(BigDecimal.ZERO) > 0 && btcAmtNet.compareTo(BigDecimal.ZERO) < 0)                            { // 空头爆仓                                BigDecimal explosionPrice = usdxAmtNet.divide(btcAmtNet, 8, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(-1));                                // 空单允许卖入价=大限价+0.5%                                explosionPrice = explosionPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getClosePositionShortPrePercent()));                                logger.debug("账户：" + accountId + "空头爆仓价格" + explosionPrice + " maxPrice=" + maxPrice);                                // 空头买单 价格上限=【大限价上限，空头爆仓价下浮】取最小值                                if (explosionPrice.compareTo(maxPrice) < 0)                                {                                    logger.debug("价格上限=【大限价上限，空头爆仓价下浮】取最小值=空头爆仓价下浮");                                    maxPrice = explosionPrice;                                }                            }                        }                        else                        { // 法定货币作为标的                          // 空头买                            logger.debug("数字货币净值：" + btcAmtNet);                            logger.debug("法定货币净值：" + usdxAmtNet);                            if (btcAmtNet.compareTo(BigDecimal.ZERO) > 0 && usdxAmtNet.compareTo(BigDecimal.ZERO) < 0)                            { // 空头爆仓                                BigDecimal explosionPrice = btcAmtNet.divide(usdxAmtNet, 8, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(-1));                                // 空单允许卖入价=大限价+0.5%                                explosionPrice = explosionPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getClosePositionShortPrePercent()));                                logger.debug("账户：" + accountId + "空头爆仓价格" + explosionPrice + " maxPrice=" + maxPrice);                                // 空头买单 价格上限=【大限价上限，空头爆仓价下浮】取最小值                                if (explosionPrice.compareTo(maxPrice) < 0)                                {                                    logger.debug("价格上限=【大限价上限，空头爆仓价下浮】取最小值=空头爆仓价下浮");                                    maxPrice = explosionPrice;                                }                            }                        }                    }                    minPrice = minPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_UP);                    maxPrice = maxPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                    if (minPrice.compareTo(BigDecimal.ZERO) < 0)                    {                        minPrice = BigDecimal.ZERO;                    }                    logger.debug("期货买入大限价 price[" + minPrice + "," + maxPrice + "]");                    BigDecimal price = entrustPrice;                    if (price.compareTo(minPrice) < 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    if (price.compareTo(maxPrice) > 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    // 2.小限价 买入小限价：[加权指数*50%，最新成交价*101%                    minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getBuyMaxLimitPriceDownPercent()));                    maxPrice = entrustSellOne.multiply(BigDecimal.ONE.add(stockInfo.getBuyMinLimitPriceUpPercent()));                    minPrice = minPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_UP);                    maxPrice = maxPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                    if (minPrice.compareTo(BigDecimal.ZERO) < 0)                    {                        minPrice = BigDecimal.ZERO;                    }                    logger.debug("期货买入小限价 price[" + minPrice + "," + maxPrice + "]");                    price = entrustPrice;                    if (price.compareTo(minPrice) < 0)                    {                        logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    if (price.compareTo(maxPrice) > 0)                    {                        logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                }                else                {                    logger.debug("错误的委托方向：" + entrustDirect);                    throw new BusinessException(CommonEnums.PARAMS_VALID_ERR);                }            }            // 市价            else if (StringUtils.equalsIgnoreCase(entrustType, TradeEnums.ENTRUST_X_ENTRUST_TYPE_MARKETPRICE.getCode()))            {            }            else            {                logger.debug("错误的委托类型：委托类型(限价limitPrice、市价marketPrice):" + entrustType);                throw new BusinessException(CommonEnums.PARAMS_VALID_ERR);            }        }        // ============================合约交易 end===============================================        // ============================杠杆现货交易 start===============================================        else if (StringUtils.equalsIgnoreCase(stockInfo.getStockType(), FundConsts.STOCKTYPE_LEVERAGEDSPOT))        {            BigDecimal btcAmtNet = accountAssetService.getNetAsset(accountId, stockInfo.getTradeStockinfoId(), exchangePairMoney);            BigDecimal usdxAmtNet = accountAssetService.getNetAsset(accountId, stockInfo.getCapitalStockinfoId(), exchangePairMoney);            RtQuotationInfo rtQuotationInfo = rtQuotationInfoService.queryRtQuotationInfo(stockInfo.getTradeStockinfoId(), exchangePairMoney);            logger.debug(rtQuotationInfo.toString());            BigDecimal idxAvgPrice = BigDecimal.ZERO;            BigDecimal platPrice = BigDecimal.ZERO;            BigDecimal entrustSellOne = BigDecimal.ZERO;            BigDecimal entrustBuyOne = BigDecimal.ZERO;            if (rtQuotationInfo != null)            {                idxAvgPrice = rtQuotationInfo.getIdxAvgPrice();                platPrice = rtQuotationInfo.getPlatPrice();                entrustSellOne = rtQuotationInfo.getEntrustSellOne();                entrustBuyOne = rtQuotationInfo.getEntrustBuyOne();                if (idxAvgPrice == null || idxAvgPrice.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }                if (platPrice == null || platPrice.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }                if (entrustSellOne == null || entrustSellOne.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }                if (entrustBuyOne == null || entrustBuyOne.compareTo(BigDecimal.ZERO) <= 0) { throw new BusinessException(10000001, "行情异常！"); }            }            else            {                throw new BusinessException("行情异常！");            }            // 限价            if (StringUtils.equalsIgnoreCase(entrustType, TradeEnums.ENTRUST_X_ENTRUST_TYPE_LIMITPRICE.getCode()))            {                // 委托卖出                if (StringUtils.equalsIgnoreCase(entrustDirect, TradeEnums.ENTRUST_DEAL_DIRECT_SPOT_SELL.getCode()))                {                    // 1.大限价 卖出大限价：[加权指数*95%，加权指数*200%]                    BigDecimal minPrice = BigDecimal.ZERO;                    BigDecimal maxPrice = BigDecimal.valueOf(999999);                    minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getSellMaxLimitPriceDownPercent()));                    maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getSellMaxLimitPriceUpPercent()));                    if (accountId.longValue() > FundConsts.SYSTEM_ACCOUNT_ID.longValue())                    {                        logger.debug("数字货币净值：" + btcAmtNet);                        logger.debug("法定货币净值：" + usdxAmtNet);                        if (usdxAmtNet.compareTo(BigDecimal.ZERO) < 0 && btcAmtNet.compareTo(BigDecimal.ZERO) > 0)                        { // 多头爆仓                            BigDecimal explosionPrice = usdxAmtNet.divide(btcAmtNet, 8, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(-1));                            logger.debug("111爆仓价格：" + explosionPrice);                            // 多单允许卖入价=大限价-0.5%                            explosionPrice = explosionPrice.multiply(BigDecimal.ONE.add(stockInfo.getClosePositionLongPrePercent()));                            logger.debug("账户：" + accountId + "多头爆仓价格" + explosionPrice + " minPrice=" + minPrice);                            if (minPrice.compareTo(explosionPrice) < 0)                            {                                logger.debug("价格下限=【大限价下限，空头爆仓价上浮】取最大值=空头爆仓价上浮");                                minPrice = explosionPrice;                            }                        }                    }                    minPrice = minPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_UP);                    maxPrice = maxPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                    if (minPrice.compareTo(BigDecimal.ZERO) < 0)                    {                        minPrice = BigDecimal.ZERO;                    }                    logger.debug("大限价 price[" + minPrice + "," + maxPrice + "]");                    BigDecimal price = entrustPrice;                    if (price.compareTo(minPrice) < 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    if (price.compareTo(maxPrice) > 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    // 2018-01-14 加班 潘总让拿掉                    // 2.小限价                    // 卖出小限价：[最新成交价*99%，加权指数*200%]                    /*                     * minPrice = entrustBuyOne.multiply(BigDecimal.ONE.subtract(stockInfo.getSellMinLimitPriceDownPercent()));                     * maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getSellMaxLimitPriceUpPercent()));                     * minPrice = minPrice.setScale(2, BigDecimal.ROUND_HALF_UP);                     * maxPrice = maxPrice.setScale(2, BigDecimal.ROUND_HALF_DOWN);                     * logger.debug("小限价 price[" + minPrice + "," + maxPrice + "]");                     * price = entrustPrice;                     * if (price.compareTo(minPrice) < 0)                     * {                     * logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                     * throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                     * }                     * if (price.compareTo(maxPrice) > 0)                     * {                     * logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                     * throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                     * }                     */                }                // 委托买入                else if (StringUtils.equalsIgnoreCase(entrustDirect, TradeEnums.ENTRUST_DEAL_DIRECT_SPOT_BUY.getCode()))                {                    // 1.大限价 买入大限价：[加权指数*50%，加权指数*105%]                    BigDecimal minPrice = BigDecimal.ZERO;                    BigDecimal maxPrice = BigDecimal.ZERO;                    minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getBuyMaxLimitPriceDownPercent()));                    maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getBuyMaxLimitPriceUpPercent()));                    // 空头买                    logger.debug("数字货币净值：" + btcAmtNet);                    logger.debug("法定货币净值：" + usdxAmtNet);                    if (accountId.longValue() > FundConsts.SYSTEM_ACCOUNT_ID.longValue())                    {                        if (usdxAmtNet.compareTo(BigDecimal.ZERO) > 0 && btcAmtNet.compareTo(BigDecimal.ZERO) < 0)                        { // 空头爆仓                            BigDecimal explosionPrice = usdxAmtNet.divide(btcAmtNet, 8, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(-1));                            // 空单允许卖入价=大限价+0.5%                            explosionPrice = explosionPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getClosePositionShortPrePercent()));                            logger.debug("账户：" + accountId + "空头爆仓价格" + explosionPrice + " maxPrice=" + maxPrice);                            // 空头买单 价格上限=【大限价上限，空头爆仓价下浮】取最小值                            if (explosionPrice.compareTo(maxPrice) < 0)                            {                                logger.debug("价格上限=【大限价上限，空头爆仓价下浮】取最小值=空头爆仓价下浮");                                maxPrice = explosionPrice;                            }                        }                    }                    minPrice = minPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_UP);                    maxPrice = maxPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                    if (minPrice.compareTo(BigDecimal.ZERO) < 0)                    {                        minPrice = BigDecimal.ZERO;                    }                    logger.debug("大限价 price[" + minPrice + "," + maxPrice + "]");                    BigDecimal price = entrustPrice;                    if (price.compareTo(minPrice) < 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    if (price.compareTo(maxPrice) > 0)                    {                        logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                    }                    // 2018-01-14 加班 潘总让拿掉                    // 2.小限价 买入小限价：[加权指数*50%，最新成交价*101%                    /*                     * minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getBuyMaxLimitPriceDownPercent()));                     * maxPrice = entrustBuyOne.multiply(BigDecimal.ONE.add(stockInfo.getBuyMinLimitPriceUpPercent()));                     * minPrice = minPrice.setScale(2, BigDecimal.ROUND_HALF_UP);                     * maxPrice = maxPrice.setScale(2, BigDecimal.ROUND_HALF_DOWN);                     * logger.debug("小限价 price[" + minPrice + "," + maxPrice + "]");                     * price = entrustPrice;                     * if (price.compareTo(minPrice) < 0)                     * {                     * logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                     * throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                     * }                     * if (price.compareTo(maxPrice) > 0)                     * {                     * logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                     * throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                     * }                     */                }                else                {                    logger.debug("错误的委托方向：" + entrustDirect);                    throw new BusinessException(CommonEnums.PARAMS_VALID_ERR);                }            }            // 市价            else if (StringUtils.equalsIgnoreCase(entrustType, TradeEnums.ENTRUST_X_ENTRUST_TYPE_MARKETPRICE.getCode()))            {            }            else            {                logger.debug("错误的委托类型：委托类型(限价limitPrice、市价marketPrice):" + entrustType);                throw new BusinessException(CommonEnums.PARAMS_VALID_ERR);            }        }        // ============================杠杆现货交易 end===============================================        // ============================无杠杆现货交易 start===============================================        else if (StringUtils.equalsIgnoreCase(stockInfo.getStockType(), FundConsts.STOCKTYPE_PURESPOT))        {            RtQuotationInfo rtQuotationInfo = rtQuotationInfoService.queryRtQuotationInfo(stockInfo.getTradeStockinfoId(), exchangePairMoney);            logger.debug(rtQuotationInfo.toString());            BigDecimal idxAvgPrice = BigDecimal.ZERO;            BigDecimal platPrice = BigDecimal.ZERO;            BigDecimal entrustSellOne = BigDecimal.ZERO;            BigDecimal entrustBuyOne = BigDecimal.ZERO;            if (rtQuotationInfo != null)            {                idxAvgPrice = rtQuotationInfo.getIdxAvgPrice();                platPrice = rtQuotationInfo.getPlatPrice();                entrustSellOne = rtQuotationInfo.getEntrustSellOne();                entrustBuyOne = rtQuotationInfo.getEntrustBuyOne();                if (idxAvgPrice == null || idxAvgPrice.compareTo(BigDecimal.ZERO) < 0) { throw new BusinessException(10000001, "行情异常！"); }                if (platPrice == null || platPrice.compareTo(BigDecimal.ZERO) < 0) { throw new BusinessException(10000001, "行情异常！"); }                if (entrustSellOne == null || entrustSellOne.compareTo(BigDecimal.ZERO) < 0) { throw new BusinessException(10000001, "行情异常！"); }                if (entrustBuyOne == null || entrustBuyOne.compareTo(BigDecimal.ZERO) < 0) { throw new BusinessException(10000001, "行情异常！"); }            }            else            {                throw new BusinessException("行情异常！");            }            if (platPrice.compareTo(BigDecimal.ZERO) > 0)            {                // 限价                if (StringUtils.equalsIgnoreCase(entrustType, TradeEnums.ENTRUST_X_ENTRUST_TYPE_LIMITPRICE.getCode()))                {                    // 委托卖出                    if (StringUtils.equalsIgnoreCase(entrustDirect, TradeEnums.ENTRUST_DEAL_DIRECT_SPOT_SELL.getCode()))                    {                        // 1.大限价 卖出大限价：[加权指数*95%，加权指数*200%]                        BigDecimal minPrice = BigDecimal.ZERO;                        BigDecimal maxPrice = BigDecimal.valueOf(999999);                        BigDecimal price = entrustPrice;                        // 2018-01-26 pan确定 不需要大限价 代码暂留                        // minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getSellMaxLimitPriceDownPercent()));                        // maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getSellMaxLimitPriceUpPercent()));                        // minPrice = minPrice.setScale(2, BigDecimal.ROUND_HALF_UP);                        // maxPrice = maxPrice.setScale(2, BigDecimal.ROUND_HALF_DOWN);                        // logger.debug("大限价 price[" + minPrice + "," + maxPrice + "]");                        // BigDecimal price = entrustPrice;                        // if (price.compareTo(minPrice) < 0)                        // {                        // logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        // throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                        // }                        // if (price.compareTo(maxPrice) > 0)                        // {                        // logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        // throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                        // }                        // 2.小限价                        // 卖出小限价：[最新成交价*99%，加权指数*200%]                        // minPrice = entrustBuyOne.multiply(BigDecimal.ONE.subtract(stockInfo.getSellMinLimitPriceDownPercent()));                        // maxPrice = platPrice.multiply(BigDecimal.ONE.add(stockInfo.getSellMinLimitPriceUpPercent()));                        if (entrustSellOne.compareTo(BigDecimal.ZERO) > 0)                        {                            minPrice = entrustSellOne.multiply(BigDecimal.ONE.subtract(stockInfo.getSellMinLimitPriceDownPercent()));                            maxPrice = BigDecimal.valueOf(999999);                            minPrice = minPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_UP);                            maxPrice = maxPrice.setScale(stockInfo.getSellPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                            if (minPrice.compareTo(BigDecimal.ZERO) < 0)                            {                                minPrice = BigDecimal.ZERO;                            }                            logger.debug("小限价 price[" + minPrice + "," + maxPrice + "]");                            price = entrustPrice;                            if (price.compareTo(minPrice) < 0)                            {                                logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                                throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                            }                            if (price.compareTo(maxPrice) > 0)                            {                                logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                                throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_SELL_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                            }                        }                    }                    // 委托买入                    else if (StringUtils.equalsIgnoreCase(entrustDirect, TradeEnums.ENTRUST_DEAL_DIRECT_SPOT_BUY.getCode()))                    {                        // 1.大限价 买入大限价：[加权指数*50%，加权指数*105%]                        BigDecimal minPrice = BigDecimal.ZERO;                        BigDecimal maxPrice = BigDecimal.ZERO;                        BigDecimal price = entrustPrice;                        // 2018-01-26 pan确定 不需要大限价 代码暂留                        // minPrice = idxAvgPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getBuyMaxLimitPriceDownPercent()));                        // maxPrice = idxAvgPrice.multiply(BigDecimal.ONE.add(stockInfo.getBuyMaxLimitPriceUpPercent()));                        // minPrice = minPrice.setScale(2, BigDecimal.ROUND_HALF_UP);                        // maxPrice = maxPrice.setScale(2, BigDecimal.ROUND_HALF_DOWN);                        // logger.debug("大限价 price[" + minPrice + "," + maxPrice + "]");                        // BigDecimal price = entrustPrice;                        // if (price.compareTo(minPrice) < 0)                        // {                        // logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        // throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                        // }                        // if (price.compareTo(maxPrice) > 0)                        // {                        // logger.debug("大限价 价格范围 [" + minPrice + "," + maxPrice + "]");                        // throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE,new BigDecimal[]{minPrice,maxPrice});                        // }                        // 2.小限价 买入小限价：[加权指数*50%，最新成交价*101%                        // minPrice = platPrice.multiply(BigDecimal.ONE.subtract(stockInfo.getBuyMinLimitPriceDownPercent()));                        // maxPrice = entrustBuyOne.multiply(BigDecimal.ONE.add(stockInfo.getBuyMinLimitPriceUpPercent()));                        if (entrustBuyOne.compareTo(BigDecimal.ZERO) > 0)                        {                            minPrice = BigDecimal.ZERO;                            maxPrice = entrustBuyOne.multiply(BigDecimal.ONE.add(stockInfo.getBuyMinLimitPriceUpPercent()));                            minPrice = minPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_UP);                            maxPrice = maxPrice.setScale(stockInfo.getBuyPricePrecision(), BigDecimal.ROUND_HALF_DOWN);                            if (minPrice.compareTo(BigDecimal.ZERO) < 0)                            {                                minPrice = BigDecimal.ZERO;                            }                            logger.debug("小限价 price[" + minPrice + "," + maxPrice + "]");                            price = entrustPrice;                            if (price.compareTo(minPrice) <= 0)                            {                                logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                                throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                            }                            if (price.compareTo(maxPrice) > 0)                            {                                logger.debug("小限价 价格范围 [" + minPrice + "," + maxPrice + "]");                                throw new BusinessException(CommonEnums.ERROR_PUBLIC_ENTRUST_BUY_PRICE_RANGE, new BigDecimal[]{minPrice, maxPrice});                            }                        }                    }                    else                    {                        logger.debug("错误的委托方向：" + entrustDirect);                        throw new BusinessException(CommonEnums.PARAMS_VALID_ERR);                    }                }                // 市价                else if (StringUtils.equalsIgnoreCase(entrustType, TradeEnums.ENTRUST_X_ENTRUST_TYPE_MARKETPRICE.getCode()))                {                }                else                {                    logger.debug("错误的委托类型：委托类型(限价limitPrice、市价marketPrice):" + entrustType);                    throw new BusinessException(CommonEnums.PARAMS_VALID_ERR);                }            }            else            {                logger.debug("系统初始化下单，没有成交价格和买一价格。不拦截！");            }        }        // ============================无杠杆现货交易 end===============================================        else        {            logger.debug("证券信息类型错误");            throw new BusinessException(CommonEnums.PARAMS_VALID_ERR);        }    }}