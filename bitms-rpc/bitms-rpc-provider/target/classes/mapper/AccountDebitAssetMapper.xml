<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blocain.bitms.trade.fund.mapper.AccountDebitAssetMapper">
    <!-- 基础列 -->
    <sql id="accountDebitAssetColumns">
        a.id as id,
        a.borrowerAccountId as borrowerAccountId,
        a.lenderAccountId as lenderAccountId,
        a.stockinfoId as stockinfoId,
        a.relatedStockinfoId as relatedStockinfoId,
        a.debitAmt as debitAmt,
        a.accumulateInterest as accumulateInterest,
        a.lastPrice as lastPrice,
        a.lastInterestDay as lastInterestDay,
        a.remark as remark,
        a.updateDate as updateDate
    </sql>
    <sql id="accountDebitAssetJoinColumns">
        a.id as id,
        a.borrowerAccountId as borrowerAccountId,
        a.lenderAccountId as lenderAccountId,
        a.stockinfoId as stockinfoId,
        a.relatedStockinfoId as relatedStockinfoId,
        a.debitAmt as debitAmt,
        a.accumulateInterest as accumulateInterest,
        a.lastPrice as lastPrice,
        a.lastInterestDay as lastInterestDay,
        a.remark as remark,
        a.updateDate as updateDate,
        b.accountName as lenderAccountName,
        c.stockCode as stockCode,
        d.accountName as borrowerAccountName
    </sql>
    <sql id="accountDebitAssetJoin2Columns">
        a.id as id,
        a.borrowerAccountId as borrowerAccountId,
        a.lenderAccountId as lenderAccountId,
        a.stockinfoId as stockinfoId,
        a.relatedStockinfoId as relatedStockinfoId,
        a.debitAmt as debitAmt,
        a.accumulateInterest as accumulateInterest,
        a.lastPrice as lastPrice,
        a.lastInterestDay as lastInterestDay,
        a.remark as remark,
        a.updateDate as updateDate,
        b.accountName as lenderAccountName,
        c.stockCode as stockCode,
        d.accountName as borrowerAccountName,
        e.stockCode as relatedStockCode
    </sql>

    <resultMap id="accountDebitAssetResultMap" type="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        <id column="id" property="id"/>
        <result column="borrowerAccountId" property="borrowerAccountId"/>
        <result column="lenderAccountId" property="lenderAccountId"/>
        <result column="stockinfoId" property="stockinfoId"/>
        <result column="relatedStockinfoId" property="relatedStockinfoId"/>
        <result column="debitAmt" property="debitAmt"/>
        <result column="accumulateInterest" property="accumulateInterest" />
        <result column="lastPrice" property="lastPrice"/>
        <result column="lastInterestDay" property="lastInterestDay" />
        <result column="remark" property="remark"/>
        <result column="updateDate" property="updateDate"/>
    </resultMap>

    <!-- 普通插入 -->
    <insert id="insert" parameterType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        insert into ${tableName}(
            id ,
            borrowerAccountId ,
            lenderAccountId ,
            stockinfoId ,
            relatedStockinfoId ,
            debitAmt ,
            accumulateInterest ,
            lastPrice ,
            lastInterestDay ,
            remark ,
            updateDate
        ) VALUES (
            #{id} ,
            #{borrowerAccountId} ,
            #{lenderAccountId} ,
            #{stockinfoId} ,
            #{relatedStockinfoId} ,
            #{debitAmt} ,
            #{accumulateInterest},
            #{lastPrice},
            #{lastInterestDay},
            #{remark} ,
            #{updateDate}
        )
    </insert>
    <!-- 根据主键物理删除 -->
    <delete id="remove" >
        delete from ${tableName} where id = #{id}
    </delete>

    <!-- 根据主键逻辑删除 -->
    <update id="delete" >
        delete from ${tableName} where id = #{id}
    </update>

    <!--根据条件是否插入数据 -->
    <insert id="insertSelective" parameterType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        insert into ${tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id ,
            </if>
            <if test="borrowerAccountId != null">
                borrowerAccountId ,
            </if>
            <if test="lenderAccountId != null">
                lenderAccountId ,
            </if>
            <if test="stockinfoId != null">
                stockinfoId ,
            </if>
            <if test="relatedStockinfoId != null">
                relatedStockinfoId ,
            </if>
            <if test="debitAmt != null">
                debitAmt ,
            </if>
            <if test="accumulateInterest != null">
                accumulateInterest,
            </if>
            <if test="lastPrice != null">
                lastPrice ,
            </if>
            <if test="lastInterestDay !=null">
                lastInterestDay ,
            </if>
            <if test="remark != null">
                remark ,
            </if>
            <if test="updateDate != null">
                updateDate,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id} ,
            </if>
            <if test="borrowerAccountId != null">
                #{borrowerAccountId} ,
            </if>
            <if test="lenderAccountId != null">
                #{lenderAccountId} ,
            </if>
            <if test="stockinfoId != null">
                #{stockinfoId} ,
            </if>
            <if test="relatedStockinfoId != null">
                #{relatedStockinfoId} ,
            </if>
            <if test="debitAmt != null">
                #{debitAmt} ,
            </if>
            <if test="accumulateInterest !=null">
                #{accumulateInterest},
            </if>
            <if test="lastPrice != null">
                #{lastPrice} ,
            </if>
            <if test="lastInterestDay != null">
                #{lastInterestDay},
            </if>
            <if test="remark != null">
                #{remark} ,
            </if>
            <if test="updateDate != null">
                #{updateDate} ,
            </if>
        </trim>
    </insert>

    <!-- 选择性更新数据 -->
    <update id="updateByPrimaryKeySelective" parameterType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        update ${tableName}
        <set>
            <if test="borrowerAccountId != null">
                borrowerAccountId = #{borrowerAccountId} ,
            </if>
            <if test="lenderAccountId != null">
                lenderAccountId = #{lenderAccountId} ,
            </if>
            <if test="stockinfoId != null">
                stockinfoId = #{stockinfoId} ,
            </if>
            <if test="relatedStockinfoId != null">
                relatedStockinfoId = #{relatedStockinfoId} ,
            </if>
            <if test="debitAmt != null">
                debitAmt = #{debitAmt} ,
            </if>
            <if test="accumulateInterest !=null">
                accumulateInterest = #{accumulateInterest},
            </if>
            <if test="lastPrice != null">
                lastPrice = #{lastPrice} ,
            </if>
            <if test="lastInterestDay != null">
                lastInterestDay = #{lastInterestDay},
            </if>
            <if test="remark != null">
                remark = #{remark} ,
            </if>
            <if test="updateDate != null">
                updateDate = #{updateDate} ,
            </if>
        </set>
        where id = #{id}
    </update>

    <!-- 批量插入 -->
    <insert id="insertBatch" parameterType="list">
        insert into ${tableName}(
        id ,
        borrowerAccountId ,
        lenderAccountId ,
        stockinfoId ,
        relatedStockinfoId ,
        debitAmt ,
        accumulateInterest,
        lastPrice ,
        lastInterestDay ,
        remark ,
        updateDate
        )
        <foreach close=")" collection="list" item="item" index="index" open="(" separator="union">
            select
            #{item.id} ,
            #{item.borrowerAccountId} ,
            #{item.lenderAccountId} ,
            #{item.stockinfoId} ,
            ${item.relatedStockinfoId} ,
            #{item.debitAmt} ,
            #{item.accumulateInterest},
            #{item.lastPrice},
            #{item.lastInterestDay},
            #{item.remark} ,
            #{item.updateDate}
            from dual
        </foreach>
    </insert>

    <!-- 批量修改 -->
    <update id="updateBatch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
            update ${tableName} set
            borrowerAccountId = #{item.borrowerAccountId} ,
            lenderAccountId = #{item.lenderAccountId} ,
            stockinfoId = #{item.stockinfoId} ,
            relatedStockinfoId = #{item.relatedStockinfoId },
            debitAmt = #{item.debitAmt} ,
            accumulateInterest = #{item.accumulateInterest},
            lastPrice = #{item.lastPrice},
            lastInterestDay = #{item.lastInterestDay},
            remark = #{item.remark} ,
            updateDate = #{item.updateDate}
            where id = #{item.id}
        </foreach>
    </update>

    <!-- 根据主键更新一条信息所有数据 -->
    <update id="updateByPrimaryKey" parameterType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        update ${tableName} set
            borrowerAccountId = #{borrowerAccountId} ,
            lenderAccountId = #{lenderAccountId} ,
            stockinfoId = #{stockinfoId} ,
            relatedStockinfoId= #{relatedStockinfoId} ,
            debitAmt = #{debitAmt} ,
            accumulateInterest = #{accumulateInterest},
            lastPrice = #{lastPrice},
            lastInterestDay = #{lastInterestDay},
            remark = #{remark} ,
            updateDate = #{updateDate}
        where id = #{id}
    </update>

    <!-- 根据主键取数据 -->
    <select id="selectByPrimaryKey"  resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        select
        <include refid="accountDebitAssetColumns"/>
        from ${tableName} a where a.id = #{id}
    </select>

    <select id="selectByPrimaryKeyForUpdate"  resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        select
        <include refid="accountDebitAssetColumns"/>
        from ${tableName} a where a.id = #{id} for update
    </select>

    <select id="findListByIds" resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        SELECT
        <include refid="accountDebitAssetJoinColumns"/>
        FROM stockinfo c ,${tableName} a
        LEFT JOIN Account b ON a.lenderAccountId=b.id
        LEFT JOIN Account d ON a.borrowerAccountId=d.id
        WHERE a.stockinfoId = c.id
        and a.id in
        <foreach item="item" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!-- 按条件查找总负债 -->
    <select id="findSumDebitAmt" resultType="java.math.BigDecimal">
        SELECT
        nvl(sum(a.debitamt),0)
        FROM ${tableName} a
        WHERE 1=1
        <if test="borrowerAccountId != null">
            and a.borrowerAccountId = #{borrowerAccountId}
        </if>
        <if test="stockinfoId != null">
            and a.stockinfoId = #{stockinfoId}
        </if>
        <if test="relatedStockinfoId != null">
            and a.relatedStockinfoId = #{relatedStockinfoId}
        </if>
    </select>

    <!-- 统计负债 -->
    <select id="debitSumData" resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        <if test="tableNames.length == 0">
            select
            a.stockinfoId as stockinfoId ,
            a.relatedStockinfoId as relatedStockinfoId,
            c.stockCode as stockCode,
            d.stockCode as relatedStockCode,
            d.stockName as relatedStockName,
            nvl(sum(a.debitamt),0) as debitAmt
            from accountdebitasset a
            left join stockinfo c on a.stockinfoId=c.id
            left join stockinfo d on a.relatedstockinfoid = d.id
            where 1=1
            group by a.stockinfoId , a.relatedStockinfoId,c.stockCode,d.stockCode,d.stockName
        </if>
        <if test="tableNames.length != 0">
            <foreach item="table" collection="tableNames"  index="index"  open="" separator="" close="">
                <if test="index !=0">
                    union all
                </if>
                (
                    select
                    a.stockinfoId as stockinfoId ,
                    a.relatedStockinfoId as relatedStockinfoId,
                    c.stockCode as stockCode,
                    d.stockCode as relatedStockCode,
                    d.stockName as relatedStockName,
                    nvl(sum(a.debitamt),0) as debitAmt
                    from ${table} a
                    left join stockinfo c on a.stockinfoId=c.id
                    left join stockinfo d on a.relatedstockinfoid = d.id
                    where 1=1
                    group by a.stockinfoId , a.relatedStockinfoId,c.stockCode,d.stockCode,d.stockName
                )
            </foreach>
        </if>
    </select>

    <!-- 可分页的对象查询 -->
    <select id="findList" resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        SELECT
        <include refid="accountDebitAssetJoin2Columns"/>
        FROM stockinfo c , stockinfo e,${tableName} a
        LEFT JOIN Account b ON a.lenderAccountId=b.id
        LEFT JOIN Account d ON a.borrowerAccountId=d.id
        WHERE c.id=a.stockinfoId and e.id=a.relatedStockinfoId
        <if test="borrowerAccountId != null">
            and a.borrowerAccountId = #{borrowerAccountId}
        </if>
        <if test="lenderAccountName != null and lenderAccountName!=''">
            and b.accountName like '%'||#{lenderAccountName}||'%'
        </if>
        <if test="borrowerAccountName != null and borrowerAccountName!=''">
            and d.accountName like '%'||#{borrowerAccountName}||'%'
        </if>
        <if test="stockinfoId != null">
            and a.stockinfoId = #{stockinfoId}
        </if>
        <if test="relatedStockinfoId != null">
            and a.relatedStockinfoId = #{relatedStockinfoId}
        </if>
    </select>

    <!-- 保证金的对象查询 -->
    <select id="findMarginList" resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        SELECT
        <include refid="accountDebitAssetJoinColumns"/>
        FROM stockinfo c ,${tableName} a
        LEFT JOIN Account b ON a.lenderAccountId=b.id
        LEFT JOIN Account d ON a.borrowerAccountId=d.id
        WHERE c.id=a.stockinfoId
        <if test="borrowerAccountId != null">
            and a.borrowerAccountId = #{borrowerAccountId}
        </if>
        <if test="lenderAccountName != null and lenderAccountName!=''">
            and b.accountName like '%'||#{lenderAccountName}||'%'
        </if>
        <if test="borrowerAccountName != null and borrowerAccountName!=''">
            and d.accountName like '%'||#{borrowerAccountName}||'%'
        </if>
        <if test="stockinfoId != null">
            and a.stockinfoId = #{stockinfoId}
        </if>
        <if test="relatedStockinfoId != null">
            and a.relatedStockinfoId = #{relatedStockinfoId}
        </if>
        and a.debitAmt &gt; 0
    </select>

    <!-- 查询所有未还借款信息 -->
    <select id="findListForDebit" resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        SELECT
        <include refid="accountDebitAssetJoinColumns"/>
        FROM stockinfo c ,${tableName} a
        LEFT JOIN Account b ON a.lenderAccountId=b.id
        LEFT JOIN Account d ON a.borrowerAccountId=d.id
        WHERE c.id=a.stockinfoId
        <if test="borrowerAccountId != null">
            and a.borrowerAccountId = #{borrowerAccountId}
        </if>
        <if test="stockinfoId != null">
            and a.stockinfoId = #{stockinfoId}
        </if>
        <if test="relatedStockinfoId != null">
            and a.relatedStockinfoId = #{relatedStockinfoId}
        </if>
        <if test="lastInterestDay!=null">
            and a.lastInterestDay &lt; #{lastInterestDay}
        </if>
        and a.debitAmt &gt; 0
    </select>

    <!-- 查询所有 -->
    <select id="selectAll" resultType="com.blocain.bitms.trade.fund.entity.AccountDebitAsset">
        SELECT
        <include refid="accountDebitAssetColumns"/>
        FROM ${tableName} a WHERE 1=1
    </select>

</mapper>

